{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zak Lambert\\\\Documents\\\\GitHub\\\\tbc-sim\\\\src\\\\pages\\\\armor\\\\ArmorContainer.jsx\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { reduxForm, propTypes, getFormValues } from 'redux-form';\nimport ArmorView from './ArmorView'; //import '../style.css';\n\nclass ArmorContainer extends Component {\n  componentWillMount() {\n    this.props.initialize({\n      health: 7500,\n      resistance: 10,\n      armor: 10000,\n      attackerLevel: 63,\n      targetLevel: 60\n    });\n  }\n\n  computeArmorTable() {\n    const health = +this.props.formValues.health;\n    const attackerLevel = +this.props.formValues.attackerLevel;\n    const targetLevel = +this.props.formValues.targetLevel;\n    const armorTable = [];\n\n    for (let armor = 0; armor <= 17500; armor += 100) {\n      const reduction = this.computeDamageReduction(armor, attackerLevel, targetLevel);\n      armorTable.push({\n        armor,\n        'reduction %': +(reduction * 100).toFixed(2),\n        effectiveHealth: Math.round(health / (1 - reduction))\n      });\n    }\n\n    return armorTable;\n  }\n\n  computeDamageReduction(armor, attackerLevel, targetLevel) {\n    return Math.min(armor / (armor + 400 + 85 * attackerLevel), 0.75);\n  }\n\n  computeArmor() {\n    const armor = +this.props.formValues.armor;\n    const baseHealth = +this.props.formValues.health;\n    const attackerLevel = +this.props.formValues.attackerLevel;\n    const targetLevel = +this.props.formValues.targetLevel;\n    const damageReduction = this.computeDamageReduction(armor, attackerLevel, targetLevel);\n    const effectiveHealth = baseHealth / (1 - damageReduction);\n    return {\n      baseHealth: Math.round(baseHealth),\n      damageReduction: (damageReduction * 100).toFixed(2),\n      effectiveHealth: Math.round(effectiveHealth) || 0\n    };\n  }\n\n  render() {\n    return React.createElement(ArmorView, {\n      formValues: this.props.formValues,\n      armorTable: this.computeArmorTable(),\n      armor: this.computeArmor(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    });\n  }\n\n}\n\nArmorContainer.defaultProps = {\n  formValues: {}\n};\n\nconst mapStateToProps = state => {\n  return {\n    formValues: getFormValues('ArmorContainer')(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators({}, dispatch)\n});\n\nArmorContainer.propTypes = propTypes;\nexport default reduxForm({\n  form: 'ArmorContainer'\n})(connect(mapStateToProps, mapDispatchToProps)(ArmorContainer));","map":{"version":3,"sources":["C:\\Users\\Zak Lambert\\Documents\\GitHub\\tbc-sim\\src\\pages\\armor\\ArmorContainer.jsx"],"names":["React","Component","bindActionCreators","connect","reduxForm","propTypes","getFormValues","ArmorView","ArmorContainer","componentWillMount","props","initialize","health","resistance","armor","attackerLevel","targetLevel","computeArmorTable","formValues","armorTable","reduction","computeDamageReduction","push","toFixed","effectiveHealth","Math","round","min","computeArmor","baseHealth","damageReduction","render","defaultProps","mapStateToProps","state","mapDispatchToProps","dispatch","actions","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { reduxForm, propTypes, getFormValues } from 'redux-form';\nimport ArmorView from './ArmorView';\n//import '../style.css';\n\nclass ArmorContainer extends Component {\n\n  componentWillMount() {\n    this.props.initialize({\n      health: 7500,\n      resistance: 10,\n      armor: 10000,\n      attackerLevel: 63,\n      targetLevel: 60,\n    });\n  }\n\n  computeArmorTable() {\n    const health = +this.props.formValues.health;\n    const attackerLevel = +this.props.formValues.attackerLevel;\n    const targetLevel = +this.props.formValues.targetLevel;\n    const armorTable = [];\n    for (let armor = 0; armor <= 17500; armor += 100) {\n      const reduction = this.computeDamageReduction(armor, attackerLevel, targetLevel);\n      armorTable.push({\n        armor,\n        'reduction %': +(reduction * 100).toFixed(2),\n        effectiveHealth: Math.round(health / (1 - reduction)),\n      });\n    }\n    return armorTable;\n  }\n\n  computeDamageReduction(armor, attackerLevel, targetLevel) {\n    return Math.min(\n      armor / (armor + 400 + 85 * attackerLevel),\n      0.75);\n  }\n\n  computeArmor() {\n    const armor = +this.props.formValues.armor;\n    const baseHealth = +this.props.formValues.health;\n    const attackerLevel = +this.props.formValues.attackerLevel;\n    const targetLevel = +this.props.formValues.targetLevel;\n\n    const damageReduction = this.computeDamageReduction(armor, attackerLevel, targetLevel);\n    const effectiveHealth = baseHealth / (1 - (damageReduction));\n\n    return {\n      baseHealth: Math.round(baseHealth),\n      damageReduction: (damageReduction * 100).toFixed(2),\n      effectiveHealth: Math.round(effectiveHealth) || 0,\n    };\n  }\n\n  render() {\n    return (\n      <ArmorView\n        formValues={ this.props.formValues }\n        armorTable={ this.computeArmorTable() }\n        armor={ this.computeArmor() }\n      />\n    );\n  }\n}\n\nArmorContainer.defaultProps = {\n  formValues: {},\n};\n\nconst mapStateToProps = state => {\n  return {\n    formValues: getFormValues('ArmorContainer')(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators({\n  }, dispatch),\n});\n\nArmorContainer.propTypes = propTypes;\n\nexport default reduxForm({ form: 'ArmorContainer' })(connect(mapStateToProps, mapDispatchToProps)(ArmorContainer));\n"]},"metadata":{},"sourceType":"module"}