{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zak Lambert\\\\Documents\\\\GitHub\\\\tbc-sim\\\\src\\\\pages\\\\attackTable\\\\AttackTableContainer.jsx\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { reduxForm, propTypes, getFormValues } from 'redux-form';\nimport AttackTableView from './AttackTableView';\n\nclass AttackTableContainer extends Component {\n  componentWillMount() {\n    this.props.initialize({\n      skill: 300,\n      hit: 5,\n      crit: 10,\n      attackerLevel: 60,\n      targetLevel: 63,\n      hasParry: true,\n      hasBlock: false\n    });\n  }\n  /**\n   * Puts the number in a range of zero to one hundred.\n   *\n   * @param {number} number - The number.\n   */\n\n\n  normalize(number) {\n    return Math.max(Math.min(number, 100), 0);\n  }\n\n  computeChances(attackType = 'auto') {\n    // https://github.com/magey/classic-warrior/wiki/Attack-table\n    // https://web.archive.org/web/20070222175829/http://forums.wow-europe.com/thread.html?topicId=166546791&pageNo=1&sid=1\n    const skill = +this.props.formValues.skill;\n    const hit = +this.props.formValues.hit;\n    const crit = +this.props.formValues.crit;\n    const attackerLevel = +this.props.formValues.attackerLevel;\n    const targetLevel = +this.props.formValues.targetLevel;\n    const hasParry = !!this.props.formValues.hasParry;\n    const hasBlock = !!this.props.formValues.hasBlock;\n    const defense = targetLevel * 5;\n    const baseWeaponSkill = Math.min(300, skill);\n    let missChance = 0.0;\n\n    if (defense - skill > 10) {\n      missChance += 5 + (targetLevel * 5 - skill) * 0.2;\n    } else {\n      missChance += 5 + (targetLevel * 5 - skill) * 0.1;\n    } // low level bonus\n\n\n    missChance *= Math.min(10, targetLevel) / 10; // Note, unsure if this affects dual weild... but you can't duel wield < lvl 10\n    // New science says DualWieldMissChance = NormalMissChance * 0.8 + 20%\n\n    if (attackType === 'dual') {\n      missChance = missChance * 0.8 + 20;\n    } // Skill difference penalty\n\n\n    if (defense - skill > 10 && hit >= 1) {\n      missChance -= hit - 1;\n    } else {\n      missChance -= hit;\n    }\n\n    const bossParryBonus = targetLevel === 63 ? 12.5 : 5.0; // ? no idea if this is real but it's close to the test numbers\n\n    const dodgeChance = Math.max(5 + (targetLevel * 5 - skill) * 0.1, 0);\n    const critChance = crit + (baseWeaponSkill - defense) * (baseWeaponSkill - defense < 0 ? 0.2 : 0.4) - 1.8;\n    const parryChance = hasParry ? Math.max((defense - skill) * 0.1 + bossParryBonus, 0) : 0.0;\n    const blockChance = hasBlock ? Math.min(5.0, 5 + (targetLevel * 5 - skill) * 0.1) : 0.0;\n    const glancingChance = attackType === 'special' ? 0.0 : 10 + (targetLevel * 5 - Math.min(attackerLevel * 5, skill)) * 2.0;\n    const lowend = Math.min(1.3 - 0.05 * (defense - skill), 0.91);\n    const highend = Math.max(Math.min(1.2 - 0.03 * (defense - skill), 0.99), 0.2);\n    const glancingPenalty = attackType === 'special' ? 0.0 : (1 - (lowend + highend) / 2) * 100;\n    return {\n      critChance,\n      dodgeChance,\n      missChance,\n      parryChance,\n      blockChance,\n      glancingChance,\n      glancingPenalty\n    };\n  }\n\n  computeAttackTable({\n    critChance,\n    dodgeChance,\n    missChance,\n    parryChance,\n    blockChance,\n    glancingChance,\n    glancingPenalty\n  }) {\n    let remaining = 100.0;\n    const miss = this.normalize(missChance);\n    remaining -= miss;\n    const dodge = Math.min(this.normalize(dodgeChance), remaining);\n    remaining -= dodge;\n    const parry = Math.min(this.normalize(parryChance), remaining);\n    remaining -= parry;\n    const block = Math.min(this.normalize(blockChance), remaining);\n    remaining -= block;\n    const glancing = Math.min(this.normalize(glancingChance), remaining);\n    remaining -= glancing;\n    const crit = Math.min(this.normalize(critChance), remaining);\n    remaining -= crit;\n    const hit = remaining;\n    const overHitCap = this.normalize(missChance * -1);\n    const overCritCap = this.normalize(critChance - crit);\n    const overall = +hit + 2.0 * crit + glancing * (1 - glancingPenalty / 100);\n    return {\n      hitChance: hit.toFixed(2),\n      critChance: crit.toFixed(2),\n      dodgeChance: dodge.toFixed(2),\n      missChance: miss.toFixed(2),\n      parryChance: parry.toFixed(2),\n      blockChance: block.toFixed(2),\n      glancingChance: glancing.toFixed(2),\n      glancingPenalty: glancingPenalty.toFixed(0),\n      overHitCap: overHitCap.toFixed(2),\n      overCritCap: overCritCap.toFixed(2),\n      overall: overall.toFixed(2),\n      pieChart: [{\n        name: 'Miss',\n        value: miss\n      }, {\n        name: 'Dodge',\n        value: dodge\n      }, {\n        name: 'Parry',\n        value: parry\n      }, {\n        name: 'Block',\n        value: block\n      }, {\n        name: 'Glancing',\n        value: glancing\n      }, {\n        name: 'Crit',\n        value: crit\n      }, {\n        name: 'Hit',\n        value: hit\n      }]\n    };\n  }\n\n  computeAttackTables() {\n    return {\n      auto: this.computeAttackTable(this.computeChances('auto')),\n      special: this.computeAttackTable(this.computeChances('special')),\n      dual: this.computeAttackTable(this.computeChances('dual'))\n    };\n  }\n\n  render() {\n    return React.createElement(AttackTableView, {\n      formValues: this.props.formValues,\n      attackTables: this.computeAttackTables(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    });\n  }\n\n}\n\nAttackTableContainer.defaultProps = {\n  formValues: {}\n};\n\nconst mapStateToProps = state => {\n  return {\n    formValues: getFormValues('AttackTableContainer')(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators({}, dispatch)\n});\n\nAttackTableContainer.propTypes = propTypes;\nexport default reduxForm({\n  form: 'AttackTableContainer'\n})(connect(mapStateToProps, mapDispatchToProps)(AttackTableContainer));","map":{"version":3,"sources":["C:\\Users\\Zak Lambert\\Documents\\GitHub\\tbc-sim\\src\\pages\\attackTable\\AttackTableContainer.jsx"],"names":["React","Component","bindActionCreators","connect","reduxForm","propTypes","getFormValues","AttackTableView","AttackTableContainer","componentWillMount","props","initialize","skill","hit","crit","attackerLevel","targetLevel","hasParry","hasBlock","normalize","number","Math","max","min","computeChances","attackType","formValues","defense","baseWeaponSkill","missChance","bossParryBonus","dodgeChance","critChance","parryChance","blockChance","glancingChance","lowend","highend","glancingPenalty","computeAttackTable","remaining","miss","dodge","parry","block","glancing","overHitCap","overCritCap","overall","hitChance","toFixed","pieChart","name","value","computeAttackTables","auto","special","dual","render","defaultProps","mapStateToProps","state","mapDispatchToProps","dispatch","actions","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { reduxForm, propTypes, getFormValues } from 'redux-form';\nimport AttackTableView from './AttackTableView';\n\nclass AttackTableContainer extends Component {\n  componentWillMount() {\n    this.props.initialize({\n      skill: 300,\n      hit: 5,\n      crit: 10,\n      attackerLevel: 60,\n      targetLevel: 63,\n      hasParry: true,\n      hasBlock: false,\n    });\n  }\n\n  /**\n   * Puts the number in a range of zero to one hundred.\n   *\n   * @param {number} number - The number.\n   */\n  normalize(number) {\n    return Math.max(Math.min(number, 100), 0);\n  }\n\n  computeChances(attackType = 'auto') {\n\n    // https://github.com/magey/classic-warrior/wiki/Attack-table\n    // https://web.archive.org/web/20070222175829/http://forums.wow-europe.com/thread.html?topicId=166546791&pageNo=1&sid=1\n\n    const skill = +this.props.formValues.skill;\n    const hit = +this.props.formValues.hit;\n    const crit = +this.props.formValues.crit;\n    const attackerLevel = +this.props.formValues.attackerLevel;\n    const targetLevel = +this.props.formValues.targetLevel;\n    const hasParry = !!this.props.formValues.hasParry;\n    const hasBlock = !!this.props.formValues.hasBlock;\n    const defense = targetLevel * 5;\n    const baseWeaponSkill = Math.min(300, skill);\n\n    let missChance = 0.0;\n    if (defense - skill > 10) {\n      missChance += 5 + (targetLevel * 5 - skill) * 0.2;\n    } else {\n      missChance += 5 + (targetLevel * 5 - skill) * 0.1;\n    }\n    // low level bonus\n    missChance *= (Math.min(10, targetLevel) / 10); // Note, unsure if this affects dual weild... but you can't duel wield < lvl 10\n\n    // New science says DualWieldMissChance = NormalMissChance * 0.8 + 20%\n    if (attackType === 'dual') {\n      missChance = (missChance * 0.8) + 20;\n    }\n\n    // Skill difference penalty\n    if (defense - skill > 10 && hit >= 1) {\n      missChance -= (hit - 1);\n    } else {\n      missChance -= hit;\n    }\n\n    const bossParryBonus = targetLevel === 63 ? 12.5 : 5.0; // ? no idea if this is real but it's close to the test numbers\n\n    const dodgeChance = Math.max(5 + (targetLevel * 5 - skill) * 0.1, 0);\n    const critChance = crit + (baseWeaponSkill - defense) * (baseWeaponSkill - defense < 0 ? 0.2 : 0.4) - 1.8;\n    const parryChance = hasParry ? Math.max(((defense - skill) * 0.1) + bossParryBonus, 0) : 0.0\n    const blockChance = hasBlock ? Math.min(5.0, 5 + (targetLevel * 5 - skill) * 0.1) : 0.0;\n    const glancingChance = attackType === 'special' ? 0.0 : 10 + (targetLevel * 5 - Math.min(attackerLevel * 5, skill)) * 2.0;\n    const lowend = Math.min(1.3 - 0.05*(defense - skill), 0.91);\n    const highend = Math.max(Math.min(1.2 - 0.03*(defense - skill), 0.99), 0.2);\n    const glancingPenalty = attackType === 'special' ? 0.0 : (1 - ((lowend + highend) / 2)) * 100;\n\n    return {\n      critChance,\n      dodgeChance,\n      missChance,\n      parryChance,\n      blockChance,\n      glancingChance,\n      glancingPenalty,\n    }\n  }\n\n  computeAttackTable({\n    critChance,\n    dodgeChance,\n    missChance,\n    parryChance,\n    blockChance,\n    glancingChance,\n    glancingPenalty,\n  }) {\n\n    let remaining = 100.0;\n    const miss = this.normalize(missChance);\n    remaining -= miss;\n\n    const dodge = Math.min(this.normalize(dodgeChance), remaining);\n    remaining -= dodge;\n\n    const parry = Math.min(this.normalize(parryChance), remaining);\n    remaining -= parry;\n\n    const block = Math.min(this.normalize(blockChance), remaining);\n    remaining -= block;\n\n    const glancing = Math.min(this.normalize(glancingChance), remaining);\n    remaining -= glancing;\n\n    const crit = Math.min(this.normalize(critChance), remaining);\n    remaining -= crit;\n\n    const hit = remaining;\n\n    const overHitCap = this.normalize(missChance * -1);\n    const overCritCap = this.normalize(critChance - crit);\n    const overall = +hit + (2.0 * crit) + (glancing * (1 - (glancingPenalty / 100)));\n\n    return {\n      hitChance: hit.toFixed(2),\n      critChance: crit.toFixed(2),\n      dodgeChance: dodge.toFixed(2),\n      missChance: miss.toFixed(2),\n      parryChance: parry.toFixed(2),\n      blockChance: block.toFixed(2),\n      glancingChance: glancing.toFixed(2),\n      glancingPenalty: glancingPenalty.toFixed(0),\n      overHitCap: overHitCap.toFixed(2),\n      overCritCap: overCritCap.toFixed(2),\n      overall: overall.toFixed(2),\n      pieChart: [\n        { name: 'Miss', value: miss },\n        { name: 'Dodge', value: dodge },\n        { name: 'Parry', value: parry },\n        { name: 'Block', value: block },\n        { name: 'Glancing', value: glancing },\n        { name: 'Crit', value: crit },\n        { name: 'Hit', value: hit },\n      ],\n    }\n  }\n\n  computeAttackTables() {\n    return {\n      auto: this.computeAttackTable(this.computeChances('auto')),\n      special: this.computeAttackTable(this.computeChances('special')),\n      dual: this.computeAttackTable(this.computeChances('dual')),\n    };\n  };\n\n  render() {\n    return (\n      <AttackTableView\n        formValues={ this.props.formValues }\n        attackTables={ this.computeAttackTables() }\n      />\n    );\n  }\n}\n\nAttackTableContainer.defaultProps = {\n  formValues: {},\n};\n\nconst mapStateToProps = state => {\n  return {\n    formValues: getFormValues('AttackTableContainer')(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators({\n  }, dispatch),\n});\n\nAttackTableContainer.propTypes = propTypes;\n\nexport default reduxForm({ form: 'AttackTableContainer' })(connect(mapStateToProps, mapDispatchToProps)(AttackTableContainer));\n"]},"metadata":{},"sourceType":"module"}