{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zak Lambert\\\\Documents\\\\GitHub\\\\tbc-sim\\\\src\\\\pages\\\\defenseTable\\\\DefenseTableContainer.jsx\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { reduxForm, propTypes, getFormValues } from 'redux-form';\nimport DefenseTableView from './defenseTableView';\n\nclass DefenseTableContainer extends Component {\n  componentWillMount() {\n    this.props.initialize({\n      skill: 300,\n      plusBlock: 0,\n      plusDodge: 0,\n      plusParry: 0,\n      hasParry: true,\n      hasBlock: true,\n      playerLevel: 60,\n      mobLevel: 63\n    });\n  }\n  /**\n   * Puts the number in a range of zero to one hundred.\n   *\n   * @param {number} number - The number.\n   */\n\n\n  normalize(number) {\n    return Math.max(Math.min(number, 100), 0);\n  }\n\n  computeChances(attackType = 'auto') {\n    const skill = +this.props.formValues.skill;\n    const plusBlock = +this.props.formValues.plusBlock;\n    const plusDodge = +this.props.formValues.plusDodge;\n    const plusParry = +this.props.formValues.plusParry; // const playerLevel = +this.props.formValues.playerLevel;\n\n    const mobLevel = +this.props.formValues.mobLevel;\n    const hasParry = !!this.props.formValues.hasParry;\n    const hasBlock = !!this.props.formValues.hasBlock;\n    const mobSkill = mobLevel * 5;\n    const baseDefenseSkill = Math.min(300, skill);\n    const skillDifference = skill - mobSkill;\n    const baseSkillDifference = mobSkill - baseDefenseSkill;\n    const missChance = 5 + skillDifference * 0.04;\n    const dodgeChance = 5 + plusDodge + skillDifference * 0.04;\n    const parryChance = hasParry ? 5 + plusParry + skillDifference * 0.04 : 0;\n    const blockChance = hasBlock ? 5 + plusBlock + skillDifference * 0.04 : 0;\n    const critChance = attackType === 'special' ? 0 : 5 - skillDifference * 0.04;\n    const crushingChance = baseSkillDifference >= 15 && attackType === 'auto' ? baseSkillDifference * 2 - 15 : 0;\n    return {\n      critChance,\n      dodgeChance,\n      missChance,\n      parryChance,\n      blockChance,\n      crushingChance\n    };\n  }\n\n  computeDefenseTable({\n    critChance,\n    dodgeChance,\n    missChance,\n    parryChance,\n    blockChance,\n    crushingChance\n  }) {\n    let remaining = 100.0;\n    const miss = this.normalize(missChance);\n    remaining -= miss;\n    const dodge = Math.min(this.normalize(dodgeChance), remaining);\n    remaining -= dodge;\n    const parry = Math.min(this.normalize(parryChance), remaining);\n    remaining -= parry;\n    const block = Math.min(this.normalize(blockChance), remaining);\n    remaining -= block;\n    const crushing = Math.min(this.normalize(crushingChance), remaining);\n    remaining -= crushing;\n    const crit = Math.min(this.normalize(critChance), remaining);\n    remaining -= crit;\n    const hit = remaining;\n    const overHitCap = this.normalize(missChance * -1);\n    const overCritCap = this.normalize(critChance - crit);\n    const overall = +hit + 2.0 * crit + crushing * 1.5 + block * 0.9;\n    return {\n      hitChance: hit.toFixed(2),\n      critChance: crit.toFixed(2),\n      dodgeChance: dodge.toFixed(2),\n      missChance: miss.toFixed(2),\n      parryChance: parry.toFixed(2),\n      blockChance: block.toFixed(2),\n      crushingChance: crushing.toFixed(2),\n      overHitCap: overHitCap.toFixed(2),\n      overCritCap: overCritCap.toFixed(2),\n      overall: overall.toFixed(2),\n      pieChart: [{\n        name: 'Miss',\n        value: miss\n      }, {\n        name: 'Dodge',\n        value: dodge\n      }, {\n        name: 'Parry',\n        value: parry\n      }, {\n        name: 'Block',\n        value: block\n      }, {\n        name: 'Crushing',\n        value: crushing\n      }, {\n        name: 'Crit',\n        value: crit\n      }, {\n        name: 'Hit',\n        value: hit\n      }]\n    };\n  }\n\n  computeDefenseTables() {\n    return {\n      auto: this.computeDefenseTable(this.computeChances('auto')),\n      special: this.computeDefenseTable(this.computeChances('special'))\n    };\n  }\n\n  render() {\n    return React.createElement(DefenseTableView, {\n      formValues: this.props.formValues,\n      defenseTables: this.computeDefenseTables(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    });\n  }\n\n}\n\nDefenseTableContainer.defaultProps = {\n  formValues: {}\n};\n\nconst mapStateToProps = state => {\n  return {\n    formValues: getFormValues('DefenseTableContainer')(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators({}, dispatch)\n});\n\nDefenseTableContainer.propTypes = propTypes;\nexport default reduxForm({\n  form: 'DefenseTableContainer'\n})(connect(mapStateToProps, mapDispatchToProps)(DefenseTableContainer));","map":{"version":3,"sources":["C:\\Users\\Zak Lambert\\Documents\\GitHub\\tbc-sim\\src\\pages\\defenseTable\\DefenseTableContainer.jsx"],"names":["React","Component","bindActionCreators","connect","reduxForm","propTypes","getFormValues","DefenseTableView","DefenseTableContainer","componentWillMount","props","initialize","skill","plusBlock","plusDodge","plusParry","hasParry","hasBlock","playerLevel","mobLevel","normalize","number","Math","max","min","computeChances","attackType","formValues","mobSkill","baseDefenseSkill","skillDifference","baseSkillDifference","missChance","dodgeChance","parryChance","blockChance","critChance","crushingChance","computeDefenseTable","remaining","miss","dodge","parry","block","crushing","crit","hit","overHitCap","overCritCap","overall","hitChance","toFixed","pieChart","name","value","computeDefenseTables","auto","special","render","defaultProps","mapStateToProps","state","mapDispatchToProps","dispatch","actions","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { reduxForm, propTypes, getFormValues } from 'redux-form';\nimport DefenseTableView from './defenseTableView';\n\nclass DefenseTableContainer extends Component {\n  componentWillMount() {\n    this.props.initialize({\n      skill: 300,\n      plusBlock: 0,\n      plusDodge: 0,\n      plusParry: 0,\n      hasParry: true,\n      hasBlock: true,\n      playerLevel: 60,\n      mobLevel: 63,\n    });\n  }\n\n  /**\n   * Puts the number in a range of zero to one hundred.\n   *\n   * @param {number} number - The number.\n   */\n  normalize(number) {\n    return Math.max(Math.min(number, 100), 0);\n  }\n\n  computeChances(attackType = 'auto') {\n\n    const skill = +this.props.formValues.skill;\n    const plusBlock = +this.props.formValues.plusBlock;\n    const plusDodge = +this.props.formValues.plusDodge;\n    const plusParry = +this.props.formValues.plusParry;\n    // const playerLevel = +this.props.formValues.playerLevel;\n    const mobLevel = +this.props.formValues.mobLevel;\n    const hasParry = !!this.props.formValues.hasParry;\n    const hasBlock = !!this.props.formValues.hasBlock;\n    const mobSkill = mobLevel * 5;\n    const baseDefenseSkill = Math.min(300, skill);    \n\n    const skillDifference = skill - mobSkill;\n    const baseSkillDifference = mobSkill - baseDefenseSkill;\n\n    const missChance = 5 + skillDifference * 0.04;\n    const dodgeChance = 5 + plusDodge + skillDifference * 0.04;\n    const parryChance = hasParry ? 5 + plusParry + skillDifference * 0.04 : 0;\n    const blockChance = hasBlock ? 5 + plusBlock + skillDifference * 0.04 : 0;\n    const critChance = attackType === 'special' ? 0 : 5 - skillDifference * 0.04\n    const crushingChance = baseSkillDifference >= 15 && attackType === 'auto' ? (baseSkillDifference * 2) - 15 : 0;\n\n    return {\n      critChance,\n      dodgeChance,\n      missChance,\n      parryChance,\n      blockChance,\n      crushingChance,\n    }\n  }\n\n  computeDefenseTable({\n    critChance,\n    dodgeChance,\n    missChance,\n    parryChance,\n    blockChance,\n    crushingChance,\n  }) {\n\n    let remaining = 100.0;\n    const miss = this.normalize(missChance);\n    remaining -= miss;\n\n    const dodge = Math.min(this.normalize(dodgeChance), remaining);\n    remaining -= dodge;\n\n    const parry = Math.min(this.normalize(parryChance), remaining);\n    remaining -= parry;\n\n    const block = Math.min(this.normalize(blockChance), remaining);\n    remaining -= block;\n\n    const crushing = Math.min(this.normalize(crushingChance), remaining);\n    remaining -= crushing;\n\n    const crit = Math.min(this.normalize(critChance), remaining);\n    remaining -= crit;\n\n    const hit = remaining;\n\n    const overHitCap = this.normalize(missChance * -1);\n    const overCritCap = this.normalize(critChance - crit);\n    const overall = +hit + (2.0 * crit) + (crushing * 1.5) + (block * 0.9);\n\n    return {\n      hitChance: hit.toFixed(2),\n      critChance: crit.toFixed(2),\n      dodgeChance: dodge.toFixed(2),\n      missChance: miss.toFixed(2),\n      parryChance: parry.toFixed(2),\n      blockChance: block.toFixed(2),\n      crushingChance: crushing.toFixed(2),\n      overHitCap: overHitCap.toFixed(2),\n      overCritCap: overCritCap.toFixed(2),\n      overall: overall.toFixed(2),\n      pieChart: [\n        { name: 'Miss', value: miss },\n        { name: 'Dodge', value: dodge },\n        { name: 'Parry', value: parry },\n        { name: 'Block', value: block },\n        { name: 'Crushing', value: crushing },\n        { name: 'Crit', value: crit },\n        { name: 'Hit', value: hit },\n      ],\n    }\n  }\n\n  computeDefenseTables() {\n    return {\n      auto: this.computeDefenseTable(this.computeChances('auto')),\n      special: this.computeDefenseTable(this.computeChances('special')),\n    };\n  };\n\n  render() {\n    return (\n      <DefenseTableView\n        formValues={ this.props.formValues }\n        defenseTables={ this.computeDefenseTables() }\n      />\n    );\n  }\n}\n\nDefenseTableContainer.defaultProps = {\n  formValues: {},\n};\n\nconst mapStateToProps = state => {\n  return {\n    formValues: getFormValues('DefenseTableContainer')(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators({\n  }, dispatch),\n});\n\nDefenseTableContainer.propTypes = propTypes;\n\nexport default reduxForm({ form: 'DefenseTableContainer' })(connect(mapStateToProps, mapDispatchToProps)(DefenseTableContainer));\n"]},"metadata":{},"sourceType":"module"}