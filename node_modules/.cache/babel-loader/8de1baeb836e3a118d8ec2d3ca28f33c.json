{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zak Lambert\\\\Documents\\\\GitHub\\\\tbc-sim\\\\src\\\\pages\\\\resistances\\\\ResistancesContainer.jsx\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { reduxForm, propTypes, getFormValues } from 'redux-form';\nimport ResistancesView from './ResistancesView'; //import '../style.css';\n\nclass ResistancesContainer extends Component {\n  componentWillMount() {\n    this.props.initialize({\n      health: 5000,\n      resistance: 10\n    });\n  }\n\n  computeResistanceTable() {\n    const health = +this.props.formValues.health;\n    const resistances = [];\n\n    for (let resistance = 0; resistance <= 315; resistance += 5) {\n      const reduction = resistance / 315 * 0.75;\n      resistances.push({\n        resistance,\n        'reduction %': +(reduction * 100).toFixed(2),\n        effectiveHealth: Math.round(health / (1 - reduction))\n      });\n    }\n\n    return resistances;\n  }\n\n  computeResistance() {\n    const resistance = +this.props.formValues.resistance;\n    const baseHealth = +this.props.formValues.health;\n    const effectiveHealth = baseHealth / (1 - resistance / 315 * 0.75);\n    const damageReduction = (resistance / 315 * 75).toFixed(2);\n    const effectiveHealthWithTenMoreHealth = (baseHealth + 10) / (1 - resistance / 315 * 0.75);\n    const effectiveHealthWithOneMoreResistance = baseHealth / (1 - (resistance + 1) / 315 * 0.75);\n    const valueOfTenHealth = (effectiveHealthWithTenMoreHealth - effectiveHealth).toFixed(2);\n    const valueofOneResist = (effectiveHealthWithOneMoreResistance - effectiveHealth).toFixed(2);\n    return {\n      resistance,\n      baseHealth: Math.round(baseHealth),\n      damageReduction,\n      effectiveHealth: Math.round(effectiveHealth) || 0,\n      valueOfTenHealth,\n      valueofOneResist\n    };\n  }\n\n  render() {\n    return React.createElement(ResistancesView, {\n      formValues: this.props.formValues,\n      resistancesTable: this.computeResistanceTable(),\n      resistances: this.computeResistance(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    });\n  }\n\n}\n\nResistancesContainer.defaultProps = {\n  formValues: {}\n};\n\nconst mapStateToProps = state => {\n  return {\n    formValues: getFormValues('ResistancesContainer')(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators({}, dispatch)\n});\n\nResistancesContainer.propTypes = propTypes;\nexport default reduxForm({\n  form: 'ResistancesContainer'\n})(connect(mapStateToProps, mapDispatchToProps)(ResistancesContainer));","map":{"version":3,"sources":["C:\\Users\\Zak Lambert\\Documents\\GitHub\\tbc-sim\\src\\pages\\resistances\\ResistancesContainer.jsx"],"names":["React","Component","bindActionCreators","connect","reduxForm","propTypes","getFormValues","ResistancesView","ResistancesContainer","componentWillMount","props","initialize","health","resistance","computeResistanceTable","formValues","resistances","reduction","push","toFixed","effectiveHealth","Math","round","computeResistance","baseHealth","damageReduction","effectiveHealthWithTenMoreHealth","effectiveHealthWithOneMoreResistance","valueOfTenHealth","valueofOneResist","render","defaultProps","mapStateToProps","state","mapDispatchToProps","dispatch","actions","form"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,aAA/B,QAAoD,YAApD;AACA,OAAOC,eAAP,MAA4B,mBAA5B,C,CACA;;AAEA,MAAMC,oBAAN,SAAmCP,SAAnC,CAA6C;AAE3CQ,EAAAA,kBAAkB,GAAG;AACnB,SAAKC,KAAL,CAAWC,UAAX,CAAsB;AACpBC,MAAAA,MAAM,EAAE,IADY;AAEpBC,MAAAA,UAAU,EAAE;AAFQ,KAAtB;AAID;;AAEDC,EAAAA,sBAAsB,GAAG;AACvB,UAAMF,MAAM,GAAG,CAAC,KAAKF,KAAL,CAAWK,UAAX,CAAsBH,MAAtC;AACA,UAAMI,WAAW,GAAG,EAApB;;AACA,SAAK,IAAIH,UAAU,GAAG,CAAtB,EAAyBA,UAAU,IAAI,GAAvC,EAA4CA,UAAU,IAAI,CAA1D,EAA6D;AAC3D,YAAMI,SAAS,GAAIJ,UAAU,GAAG,GAAd,GAAqB,IAAvC;AACAG,MAAAA,WAAW,CAACE,IAAZ,CAAiB;AACfL,QAAAA,UADe;AAEf,uBAAe,CAAC,CAACI,SAAS,GAAG,GAAb,EAAkBE,OAAlB,CAA0B,CAA1B,CAFD;AAGfC,QAAAA,eAAe,EAAEC,IAAI,CAACC,KAAL,CAAWV,MAAM,IAAI,IAAIK,SAAR,CAAjB;AAHF,OAAjB;AAKD;;AACD,WAAOD,WAAP;AACD;;AAEDO,EAAAA,iBAAiB,GAAG;AAClB,UAAMV,UAAU,GAAG,CAAC,KAAKH,KAAL,CAAWK,UAAX,CAAsBF,UAA1C;AACA,UAAMW,UAAU,GAAG,CAAC,KAAKd,KAAL,CAAWK,UAAX,CAAsBH,MAA1C;AAEA,UAAMQ,eAAe,GAAGI,UAAU,IAAI,IAAMX,UAAU,GAAG,GAAd,GAAqB,IAA9B,CAAlC;AACA,UAAMY,eAAe,GAAG,CAAEZ,UAAU,GAAG,GAAd,GAAqB,EAAtB,EAA0BM,OAA1B,CAAkC,CAAlC,CAAxB;AACA,UAAMO,gCAAgC,GAAG,CAACF,UAAU,GAAG,EAAd,KAAqB,IAAMX,UAAU,GAAG,GAAd,GAAqB,IAA/C,CAAzC;AACA,UAAMc,oCAAoC,GAAGH,UAAU,IAAI,IAAM,CAACX,UAAU,GAAG,CAAd,IAAmB,GAApB,GAA2B,IAApC,CAAvD;AACA,UAAMe,gBAAgB,GAAG,CAACF,gCAAgC,GAAGN,eAApC,EAAqDD,OAArD,CAA6D,CAA7D,CAAzB;AACA,UAAMU,gBAAgB,GAAG,CAACF,oCAAoC,GAAGP,eAAxC,EAAyDD,OAAzD,CAAiE,CAAjE,CAAzB;AAEA,WAAO;AACLN,MAAAA,UADK;AAELW,MAAAA,UAAU,EAAEH,IAAI,CAACC,KAAL,CAAWE,UAAX,CAFP;AAGLC,MAAAA,eAHK;AAILL,MAAAA,eAAe,EAAEC,IAAI,CAACC,KAAL,CAAWF,eAAX,KAA+B,CAJ3C;AAKLQ,MAAAA,gBALK;AAMLC,MAAAA;AANK,KAAP;AAQD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,eAAD;AACE,MAAA,UAAU,EAAG,KAAKpB,KAAL,CAAWK,UAD1B;AAEE,MAAA,gBAAgB,EAAG,KAAKD,sBAAL,EAFrB;AAGE,MAAA,WAAW,EAAG,KAAKS,iBAAL,EAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD;;AApD0C;;AAuD7Cf,oBAAoB,CAACuB,YAArB,GAAoC;AAClChB,EAAAA,UAAU,EAAE;AADsB,CAApC;;AAIA,MAAMiB,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLlB,IAAAA,UAAU,EAAET,aAAa,CAAC,sBAAD,CAAb,CAAsC2B,KAAtC;AADP,GAAP;AAGD,CAJD;;AAMA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACtCC,EAAAA,OAAO,EAAElC,kBAAkB,CAAC,EAAD,EACxBiC,QADwB;AADW,CAAL,CAAnC;;AAKA3B,oBAAoB,CAACH,SAArB,GAAiCA,SAAjC;AAEA,eAAeD,SAAS,CAAC;AAAEiC,EAAAA,IAAI,EAAE;AAAR,CAAD,CAAT,CAA4ClC,OAAO,CAAC6B,eAAD,EAAkBE,kBAAlB,CAAP,CAA6C1B,oBAA7C,CAA5C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { reduxForm, propTypes, getFormValues } from 'redux-form';\nimport ResistancesView from './ResistancesView';\n//import '../style.css';\n\nclass ResistancesContainer extends Component {\n\n  componentWillMount() {\n    this.props.initialize({\n      health: 5000,\n      resistance: 10,\n    });\n  }\n\n  computeResistanceTable() {\n    const health = +this.props.formValues.health;\n    const resistances = [];\n    for (let resistance = 0; resistance <= 315; resistance += 5) {\n      const reduction = (resistance / 315) * 0.75;\n      resistances.push({\n        resistance,\n        'reduction %': +(reduction * 100).toFixed(2),\n        effectiveHealth: Math.round(health / (1 - reduction)),\n      });\n    }\n    return resistances;\n  }\n\n  computeResistance() {\n    const resistance = +this.props.formValues.resistance;\n    const baseHealth = +this.props.formValues.health;\n\n    const effectiveHealth = baseHealth / (1 - ((resistance / 315) * 0.75));\n    const damageReduction = ((resistance / 315) * 75).toFixed(2);\n    const effectiveHealthWithTenMoreHealth = (baseHealth + 10) / (1 - ((resistance / 315) * 0.75));\n    const effectiveHealthWithOneMoreResistance = baseHealth / (1 - (((resistance + 1) / 315) * 0.75));\n    const valueOfTenHealth = (effectiveHealthWithTenMoreHealth - effectiveHealth).toFixed(2);\n    const valueofOneResist = (effectiveHealthWithOneMoreResistance - effectiveHealth).toFixed(2);\n\n    return {\n      resistance,\n      baseHealth: Math.round(baseHealth),\n      damageReduction,\n      effectiveHealth: Math.round(effectiveHealth) || 0,\n      valueOfTenHealth,\n      valueofOneResist,\n    };\n  }\n\n  render() {\n    return (\n      <ResistancesView\n        formValues={ this.props.formValues }\n        resistancesTable={ this.computeResistanceTable() }\n        resistances={ this.computeResistance() }\n      />\n    );\n  }\n}\n\nResistancesContainer.defaultProps = {\n  formValues: {},\n};\n\nconst mapStateToProps = state => {\n  return {\n    formValues: getFormValues('ResistancesContainer')(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators({\n  }, dispatch),\n});\n\nResistancesContainer.propTypes = propTypes;\n\nexport default reduxForm({ form: 'ResistancesContainer' })(connect(mapStateToProps, mapDispatchToProps)(ResistancesContainer));\n"]},"metadata":{},"sourceType":"module"}