{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zak Lambert\\\\Desktop\\\\tbc-sim-master (2)\\\\tbc-sim-master\\\\src\\\\pages\\\\spells\\\\HealingContainer.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field } from 'redux-form';\nimport _ from 'lodash';\nimport HealingView from './HealingView';\nimport '../style.css';\n\nclass HealingContainer extends Component {\n  applyTalents({\n    spell,\n    rank,\n    character,\n    target\n  }, talents) {\n    const modifiedSpell = Object.assign({}, spell);\n    const modifiedRank = Object.assign({}, rank);\n    const modifiedCharacter = Object.assign({}, character);\n    const modifiedTarget = Object.assign({}, target);\n\n    _.forOwn(talents, value => {\n      if (character[value.field]) {\n        value.effect({\n          spell,\n          rank,\n          modifiedSpell: modifiedSpell,\n          modifiedRank: modifiedRank,\n          character: modifiedCharacter,\n          target: modifiedTarget\n        });\n      }\n    });\n\n    return {\n      modifiedSpell,\n      modifiedRank,\n      modifiedCharacter,\n      modifiedTarget,\n      spell,\n      rank,\n      character,\n      target\n    };\n  }\n\n  computeSpellDetails({\n    modifiedSpell,\n    modifiedRank,\n    modifiedCharacter,\n    target,\n    spell,\n    rank\n  }) {\n    const lowLevelPenalty = 1 - (20 - Math.min(rank.level, 20)) * 0.0375;\n    const coefficient = Math.min(rank.castTime, 3.5) / 3.5 * lowLevelPenalty;\n    const directCoefficient = spell.coefficient ? spell.coefficient * modifiedSpell.bonusDirect * lowLevelPenalty : coefficient;\n    const hotCoefficient = spell.hotCoefficient ? spell.hotCoefficient * modifiedSpell.bonusDirect * lowLevelPenalty : Math.min((modifiedRank.duration || 15) / 15, 1) * lowLevelPenalty;\n    const totalCrit = Math.min(+modifiedCharacter.crit, 100);\n    const mana = modifiedRank.mana;\n    const castTime = Math.max(modifiedRank.castTime, 1.5);\n    const numberOfTicks = modifiedRank.duration / 3.0;\n    const modifiedNumberOfTicks = modifiedRank.duration / 3.0;\n    const bonusHot = modifiedSpell.hot ? hotCoefficient * +modifiedCharacter.healing : 0.0;\n    const baseHotTick = modifiedRank.hotTick || 0;\n    const bonusHotTick = bonusHot / numberOfTicks;\n    const totalBaseHot = baseHotTick * modifiedNumberOfTicks;\n    const totalBonusHot = bonusHotTick * modifiedNumberOfTicks;\n    const totalHot = totalBaseHot + totalBonusHot || 0.0;\n    const hotTick = totalHot / modifiedNumberOfTicks;\n    const baseAverage = ((modifiedRank.min || 0) + (modifiedRank.max || 0)) / 2;\n    const bonusHeal = modifiedSpell.direct ? directCoefficient * +modifiedCharacter.healing : 0.0;\n    const averageCritBonus = (baseAverage + bonusHeal) / 2 * (totalCrit / 100);\n    const totalDirect = baseAverage + bonusHeal + averageCritBonus;\n    const totalAverage = totalDirect + totalHot;\n    const manaEfficiency = totalAverage / mana;\n    const healingPerSecond = totalAverage / castTime;\n    const manaPerSecond = mana * (1 / castTime);\n    const rating = (healingPerSecond / 10 + manaEfficiency * 10) * 20;\n    return {\n      rank: rank.rank,\n      rankDescription: \"Rank \".concat(rank.rank),\n      mana: mana.toFixed(2),\n      mps: manaPerSecond.toFixed(2),\n      castTime,\n      base: baseAverage.toFixed(2),\n      hot: totalBaseHot,\n      hotTick,\n      bonus: bonusHeal.toFixed(2),\n      bonusHot: totalBonusHot,\n      crit: averageCritBonus.toFixed(2),\n      total: totalAverage.toFixed(2),\n      hps: healingPerSecond.toFixed(2),\n      efficiency: +manaEfficiency.toFixed(2),\n      rating,\n      coefficient\n    };\n  }\n\n  generateHealingTable(formValues = {}) {\n    return _.map(this.props.spell.ranks, rank => {\n      return this.computeSpellDetails(this.applyTalents({\n        spell: this.props.spell,\n        rank,\n        character: formValues,\n        target: {}\n      }, this.props.talents));\n    });\n  }\n\n  render() {\n    const _this$applyTalents = this.applyTalents({\n      spell: this.props.spell,\n      rank: this.props.spell.ranks[0],\n      character: this.props.formValues || {},\n      target: {}\n    }, this.props.talents),\n          modifiedSpell = _this$applyTalents.modifiedSpell;\n\n    return React.createElement(HealingView, {\n      spellName: modifiedSpell.name,\n      spell: modifiedSpell,\n      healingTable: this.generateHealingTable(this.props.formValues),\n      talents: this.props.talents,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Character\"), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"large-4 columns\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"healing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Healing\", React.createElement(Field, {\n      name: \"healing\",\n      component: \"input\",\n      type: \"number\",\n      min: \"0\",\n      max: \"9999\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"large-4 columns\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"crit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Crit %\", React.createElement(Field, {\n      name: \"crit\",\n      component: \"input\",\n      type: \"number\",\n      min: \"0\",\n      max: \"100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"large-4 columns\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"spirit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Spirit\", React.createElement(Field, {\n      name: \"spirit\",\n      component: \"input\",\n      type: \"number\",\n      min: \"0\",\n      max: \"999\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"large-4 columns\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default connect()(HealingContainer);","map":{"version":3,"sources":["C:\\Users\\Zak Lambert\\Desktop\\tbc-sim-master (2)\\tbc-sim-master\\src\\pages\\spells\\HealingContainer.jsx"],"names":["React","Component","connect","Field","_","HealingView","HealingContainer","applyTalents","spell","rank","character","target","talents","modifiedSpell","Object","assign","modifiedRank","modifiedCharacter","modifiedTarget","forOwn","value","field","effect","computeSpellDetails","lowLevelPenalty","Math","min","level","coefficient","castTime","directCoefficient","bonusDirect","hotCoefficient","duration","totalCrit","crit","mana","max","numberOfTicks","modifiedNumberOfTicks","bonusHot","hot","healing","baseHotTick","hotTick","bonusHotTick","totalBaseHot","totalBonusHot","totalHot","baseAverage","bonusHeal","direct","averageCritBonus","totalDirect","totalAverage","manaEfficiency","healingPerSecond","manaPerSecond","rating","rankDescription","toFixed","mps","base","bonus","total","hps","efficiency","generateHealingTable","formValues","map","props","ranks","render","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field } from 'redux-form';\nimport _ from 'lodash';\nimport HealingView from './HealingView';\nimport '../style.css';\n\nclass HealingContainer extends Component {\n\n  applyTalents({ spell, rank, character, target }, talents) {\n    const modifiedSpell = Object.assign({}, spell);\n    const modifiedRank = Object.assign({}, rank);\n    const modifiedCharacter = Object.assign({}, character);\n    const modifiedTarget = Object.assign({}, target);\n\n    _.forOwn(talents, (value) => {\n      if (character[value.field]) {\n        value.effect({\n          spell,\n          rank,\n          modifiedSpell: modifiedSpell,\n          modifiedRank: modifiedRank,\n          character: modifiedCharacter,\n          target: modifiedTarget,\n        });\n      }\n    });\n    return {\n      modifiedSpell,\n      modifiedRank,\n      modifiedCharacter,\n      modifiedTarget,\n      spell,\n      rank,\n      character,\n      target,\n    };\n  }\n\n  computeSpellDetails({ modifiedSpell, modifiedRank, modifiedCharacter, target, spell, rank }) {\n\n    const lowLevelPenalty = (1 - ((20 - Math.min(rank.level, 20)) * 0.0375));\n    const coefficient = ((Math.min(rank.castTime, 3.5) / 3.5) * lowLevelPenalty);\n    const directCoefficient = spell.coefficient ? (spell.coefficient * modifiedSpell.bonusDirect * lowLevelPenalty) : coefficient;\n    const hotCoefficient = spell.hotCoefficient ? (spell.hotCoefficient * modifiedSpell.bonusDirect * lowLevelPenalty) : Math.min(((modifiedRank.duration || 15) / 15), 1) * lowLevelPenalty;\n\n    const totalCrit = Math.min(+modifiedCharacter.crit, 100);\n\n    const mana = modifiedRank.mana;\n    const castTime = Math.max(modifiedRank.castTime, 1.5);\n    const numberOfTicks = modifiedRank.duration / 3.0;\n    const modifiedNumberOfTicks = modifiedRank.duration / 3.0;\n    const bonusHot = modifiedSpell.hot ? hotCoefficient * +modifiedCharacter.healing : 0.0;\n    const baseHotTick  = (modifiedRank.hotTick || 0);\n    const bonusHotTick = (bonusHot / numberOfTicks);\n    const totalBaseHot = baseHotTick * modifiedNumberOfTicks;\n    const totalBonusHot = bonusHotTick * modifiedNumberOfTicks;\n    const totalHot = totalBaseHot + totalBonusHot || 0.0;\n    const hotTick = totalHot / modifiedNumberOfTicks;\n    const baseAverage = ((modifiedRank.min || 0) + (modifiedRank.max || 0)) / 2;\n    const bonusHeal = modifiedSpell.direct ? directCoefficient * +modifiedCharacter.healing : 0.0;\n    const averageCritBonus = ((baseAverage + bonusHeal) / 2) * (totalCrit / 100);\n    const totalDirect = (baseAverage + bonusHeal + averageCritBonus);\n    const totalAverage = (totalDirect + totalHot);\n    const manaEfficiency = totalAverage / mana;\n    const healingPerSecond = totalAverage / castTime;\n    const manaPerSecond = mana * (1 / castTime);\n    const rating = ((healingPerSecond / 10) + (manaEfficiency * 10)) * 20;\n\n    return {\n      rank: rank.rank,\n      rankDescription: `Rank ${ rank.rank }`,\n      mana: mana.toFixed(2),\n      mps: manaPerSecond.toFixed(2),\n      castTime,\n      base: baseAverage.toFixed(2),\n      hot: totalBaseHot,\n      hotTick,\n      bonus: bonusHeal.toFixed(2),\n      bonusHot: totalBonusHot,\n      crit: averageCritBonus.toFixed(2),\n      total: totalAverage.toFixed(2),\n      hps: healingPerSecond.toFixed(2),\n      efficiency: +(manaEfficiency).toFixed(2),\n      rating,\n      coefficient,\n    };\n  }\n\n  generateHealingTable(formValues = {}) {\n    return _.map(this.props.spell.ranks, rank => {\n      return this.computeSpellDetails(\n        this.applyTalents({\n          spell: this.props.spell,\n          rank,\n          character: formValues,\n          target: {},\n        }, this.props.talents));\n    });\n  }\n\n  render() {\n    const { modifiedSpell } = this.applyTalents({\n      spell: this.props.spell,\n      rank: this.props.spell.ranks[0],\n      character: this.props.formValues || {},\n      target: {},\n    }, this.props.talents);\n    return (\n      <HealingView\n        spellName={ modifiedSpell.name }\n        spell={ modifiedSpell }\n        healingTable={ this.generateHealingTable(this.props.formValues) }\n        talents={ this.props.talents }\n      >\n        <h3>Character</h3>\n        <div className='row'>\n          <div className='large-4 columns'>\n            <label htmlFor='healing'>Healing\n              <Field name='healing' component='input' type='number' min='0' max='9999' />\n            </label>\n          </div>\n          <div className='large-4 columns'>\n            <label htmlFor='crit'>Crit %\n              <Field name='crit' component='input' type='number' min='0' max='100' />\n            </label>\n          </div>\n          <div className='large-4 columns'>\n            <label htmlFor='spirit'>Spirit\n              <Field name='spirit' component='input' type='number' min='0' max='999' />\n            </label>\n          </div>\n          <div className='large-4 columns' />\n        </div>\n      </HealingView>\n    );\n  }\n}\nexport default connect()(HealingContainer);\n"]},"metadata":{},"sourceType":"module"}